name: nightly-stage-test-action
on:
  pull_request:
    paths:
      - _playwright-tests/Integration/**
      - .github/workflows/nightly-stage-test-action.yml
    types: [opened, reopened, synchronize, labeled, unlabeled]

  schedule:
    - cron: '0 0 * * *' # This cron expression runs the action every 24 hours at midnight UTC

  workflow_dispatch:

concurrency:
  group: integration-group
  cancel-in-progress: true

jobs:
  playwright-integration-test:
    runs-on:
      - codebuild-content-services-int-repo-${{ github.run_id }}-${{ github.run_attempt }}
      - instance-size:large
      - buildspec-override:true

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Set up sparse checkout
        uses: ./.github/actions/sparse-checkout-utils

      - name: Cache - node_modules
        if: ${{ !cancelled() }}
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            dist
          key: ${{ runner.os }}-frontend-node-modules-${{ hashFiles('yarn.lock') }}
          restore-keys: ${{ runner.os }}-frontend-node-modules-

      - name: Cache Playwright browsers
        if: ${{ !cancelled() }}
        id: cache-playwright-browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('playwright.config.ts') }}
          restore-keys: ${{ runner.os }}-playwright-

      - name: Create .env file
        run: |
          {
            echo "CI=true"
            echo "RBAC=true"
            echo "INTEGRATION=true"
            echo "BASE_URL=\"$STAGE_BASE_URL\""
            echo "PROXY=\"$STAGE_PROXY\""
            echo "ADMIN_USERNAME=\"$STAGE_ADMIN_USERNAME\""
            echo "ADMIN_PASSWORD=\"$STAGE_ADMIN_PASSWORD\""
            echo "READONLY_USERNAME=\"$STAGE_READONLY_USERNAME\""
            echo "READONLY_PASSWORD=\"$STAGE_READONLY_PASSWORD\""
            echo "RHEL_OPERATOR_USERNAME=\"$STAGE_RHEL_OPERATOR_USERNAME\""
            echo "RHEL_OPERATOR_PASSWORD=\"$STAGE_RHEL_OPERATOR_PASSWORD\""
            echo "LAYERED_REPO_ACCESS_USERNAME=\"$STAGE_LAYERED_REPO_ACCESS_USERNAME\""
            echo "LAYERED_REPO_ACCESS_PASSWORD=\"$STAGE_LAYERED_REPO_ACCESS_PASSWORD\""
            echo "RHEL_ONLY_ACCESS_USERNAME=\"$STAGE_RHEL_ONLY_ACCESS_USERNAME\""
            echo "RHEL_ONLY_ACCESS_PASSWORD=\"$STAGE_RHEL_ONLY_ACCESS_PASSWORD\""
            echo "NO_SUBS_USER_USERNAME=\"$STAGE_NO_SUBS_USER_USERNAME\""
            echo "NO_SUBS_USER_PASSWORD=\"$STAGE_NO_SUBS_USER_PASSWORD\""
            echo "NO_SUBS_USER_ACTIVATION_KEY=\"$STAGE_NO_SUBS_USER_ACTIVATION_KEY\""
            echo "NO_SUBS_USER_ORG_ID=\"$STAGE_NO_SUBS_USER_ORG_ID\""
            echo "ORG_ID_1=\"$STAGE_ORG_ID\""
            echo "ACTIVATION_KEY_1=\"$STAGE_ACTIVATION_KEY\""
            echo "LAYERED_REPO_ACCESS_ORG_ID=\"$STAGE_LAYERED_REPO_ACCESS_ORG_ID\""
            echo "LAYERED_REPO_ACCESS_ACTIVATION_KEY=\"$STAGE_LAYERED_REPO_ACCESS_ACTIVATION_KEY\""
            echo "DOCKER_SOCKET=/var/run/docker.sock"
            echo "STABLE_SAM_USERNAME=\"$STAGE_STABLE_SAM_USERNAME\""
            echo "STABLE_SAM_PASSWORD=\"$STAGE_STABLE_SAM_PASSWORD\""
          } >> .env 2>/dev/null
          echo "âœ… Environment file created successfully"

      - name: Compare .nvmrc files
        id: compare-nvmrc
        run: |
          # Get both .nvmrc files
          curl https://raw.githubusercontent.com/content-services/content-sources-backend/refs/heads/main/_playwright-tests/.nvmrc -o backend-nvmrc
          backendNvmrc="backend-nvmrc"
          frontendNvmrc=".nvmrc"

          # Check if both files exist
          if [ ! -f "$backendNvmrc" ]; then
            echo "Error: $backendNvmrc does not exist."
            exit 1
          fi

          if [ ! -f "$frontendNvmrc" ]; then
            echo "Error: $frontendNvmrc does not exist."
            exit 1
          fi

          # Compare the contents of the two files
          if ! cmp -s "$backendNvmrc" "$frontendNvmrc"; then
            echo "::warning::The .nvmrc files are not the same."
          else
            echo "The .nvmrc versions are the same!"
          fi

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version-file: '.nvmrc'

      - name: Install dependencies
        run: yarn install

      - name: Install Playwright Browsers
        run: yarn playwright install --with-deps

      - name: Run Playwright tests
        run: CURRENTS_PROJECT_ID=jRJFbV CURRENTS_RECORD_KEY=$CURRENTS_RECORD_KEY CURRENTS_CI_BUILD_ID="${{ github.repository }}-${{ github.run_id }}-${{ github.run_attempt }}" yarn playwright test

      - name: Publish Test Report
        uses: ctrf-io/github-test-reporter@v1
        with:
          report-path: './playwright-ctrf/playwright-ctrf.json'
        if: ${{ !cancelled() }}

      - name: Store report
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: playwright-report
          path: ./playwright-ctrf
          retention-days: 10

      - name: Notify Slack on success
        uses: slackapi/slack-github-action@v2.1.1
        if: ${{ success() && github.event_name != 'pull_request' && !cancelled() }}
        with:
          webhook: ${{ secrets.SLACK_WEBHOOOK }}
          webhook-type: incoming-webhook
          payload: |
            {
              "attachments": [
                {
                  "color": "#2EB67D",
                  "blocks": [
                    {
                      "type": "section",
                      "text": {
                        "type": "mrkdwn",
                        "text": "<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}/ | :stars: Nightly stage test run>: *SUCCESS* :partymeow:"
                      }
                    }
                  ]
                }
              ]
            }

      - name: Notify Slack on failure
        uses: slackapi/slack-github-action@v2.1.1
        if: ${{ failure() && github.event_name != 'pull_request' && !cancelled() }}
        with:
          webhook: ${{ secrets.SLACK_WEBHOOOK }}
          webhook-type: incoming-webhook
          payload: |
            {
              "attachments": [
                {
                  "color": "#d72839",
                  "blocks": [
                    {
                      "type": "section",
                      "text": {
                        "type": "mrkdwn",
                        "text": "<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}/ | :stars: Nightly stage test run>: *FAILED* :big-sad:"
                      }
                    }
                  ]
                }
              ]
            }
